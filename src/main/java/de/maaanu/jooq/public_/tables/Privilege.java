/*
 * This file is generated by jOOQ.
 */
package de.maaanu.jooq.public_.tables;


import de.maaanu.PrivilegeType;
import de.maaanu.config.PrivilegeConverter;
import de.maaanu.jooq.public_.Indexes;
import de.maaanu.jooq.public_.Keys;
import de.maaanu.jooq.public_.Public;
import de.maaanu.jooq.public_.tables.records.PrivilegeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Privilege extends TableImpl<PrivilegeRecord> {

    private static final long serialVersionUID = 1834555053;

    /**
     * The reference instance of <code>PUBLIC.PRIVILEGE</code>
     */
    public static final Privilege PRIVILEGE = new Privilege();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrivilegeRecord> getRecordType() {
        return PrivilegeRecord.class;
    }

    /**
     * The column <code>PUBLIC.PRIVILEGE.ID</code>.
     */
    public final TableField<PrivilegeRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.PRIVILEGE.PRIVILEGE_TYPE</code>.
     */
    public final TableField<PrivilegeRecord, PrivilegeType> PRIVILEGE_TYPE = createField("PRIVILEGE_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "", new PrivilegeConverter());

    /**
     * Create a <code>PUBLIC.PRIVILEGE</code> table reference
     */
    public Privilege() {
        this(DSL.name("PRIVILEGE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PRIVILEGE</code> table reference
     */
    public Privilege(String alias) {
        this(DSL.name(alias), PRIVILEGE);
    }

    /**
     * Create an aliased <code>PUBLIC.PRIVILEGE</code> table reference
     */
    public Privilege(Name alias) {
        this(alias, PRIVILEGE);
    }

    private Privilege(Name alias, Table<PrivilegeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Privilege(Name alias, Table<PrivilegeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Privilege(Table<O> child, ForeignKey<O, PrivilegeRecord> key) {
        super(child, key, PRIVILEGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_4, Indexes.PRIMARY_KEY_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PrivilegeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRIVILEGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PrivilegeRecord> getPrimaryKey() {
        return Keys.PK_PRIVILEGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PrivilegeRecord>> getKeys() {
        return Arrays.<UniqueKey<PrivilegeRecord>>asList(Keys.PK_PRIVILEGE, Keys.CONSTRAINT_4, Keys.CONSTRAINT_48);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Privilege as(String alias) {
        return new Privilege(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Privilege as(Name alias) {
        return new Privilege(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Privilege rename(String name) {
        return new Privilege(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Privilege rename(Name name) {
        return new Privilege(name, null);
    }
}
