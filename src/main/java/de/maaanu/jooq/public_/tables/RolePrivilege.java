/*
 * This file is generated by jOOQ.
 */
package de.maaanu.jooq.public_.tables;


import de.maaanu.jooq.public_.Indexes;
import de.maaanu.jooq.public_.Keys;
import de.maaanu.jooq.public_.Public;
import de.maaanu.jooq.public_.tables.records.RolePrivilegeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePrivilege extends TableImpl<RolePrivilegeRecord> {

    private static final long serialVersionUID = -1047607904;

    /**
     * The reference instance of <code>PUBLIC.ROLE_PRIVILEGE</code>
     */
    public static final RolePrivilege ROLE_PRIVILEGE = new RolePrivilege();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolePrivilegeRecord> getRecordType() {
        return RolePrivilegeRecord.class;
    }

    /**
     * The column <code>PUBLIC.ROLE_PRIVILEGE.ROLE_ID</code>.
     */
    public final TableField<RolePrivilegeRecord, Integer> ROLE_ID = createField("ROLE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ROLE_PRIVILEGE.PRIVILEGE_ID</code>.
     */
    public final TableField<RolePrivilegeRecord, Integer> PRIVILEGE_ID = createField("PRIVILEGE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ROLE_PRIVILEGE</code> table reference
     */
    public RolePrivilege() {
        this(DSL.name("ROLE_PRIVILEGE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ROLE_PRIVILEGE</code> table reference
     */
    public RolePrivilege(String alias) {
        this(DSL.name(alias), ROLE_PRIVILEGE);
    }

    /**
     * Create an aliased <code>PUBLIC.ROLE_PRIVILEGE</code> table reference
     */
    public RolePrivilege(Name alias) {
        this(alias, ROLE_PRIVILEGE);
    }

    private RolePrivilege(Name alias, Table<RolePrivilegeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolePrivilege(Name alias, Table<RolePrivilegeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RolePrivilege(Table<O> child, ForeignKey<O, RolePrivilegeRecord> key) {
        super(child, key, ROLE_PRIVILEGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_PRIVILEGE2ROLE_INDEX_4, Indexes.FK_ROLE2PRIVILEGE_INDEX_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RolePrivilegeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RolePrivilegeRecord, ?>>asList(Keys.FK_ROLE2PRIVILEGE, Keys.FK_PRIVILEGE2ROLE);
    }

    public Role role() {
        return new Role(this, Keys.FK_ROLE2PRIVILEGE);
    }

    public Privilege privilege() {
        return new Privilege(this, Keys.FK_PRIVILEGE2ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RolePrivilege as(String alias) {
        return new RolePrivilege(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RolePrivilege as(Name alias) {
        return new RolePrivilege(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePrivilege rename(String name) {
        return new RolePrivilege(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePrivilege rename(Name name) {
        return new RolePrivilege(name, null);
    }
}
