/*
 * This file is generated by jOOQ.
 */
package de.maaanu.jooq.public_;


import de.maaanu.jooq.public_.tables.Databasechangeloglock;
import de.maaanu.jooq.public_.tables.Privilege;
import de.maaanu.jooq.public_.tables.Role;
import de.maaanu.jooq.public_.tables.RolePrivilege;
import de.maaanu.jooq.public_.tables.User;
import de.maaanu.jooq.public_.tables.UserRole;
import de.maaanu.jooq.public_.tables.records.DatabasechangeloglockRecord;
import de.maaanu.jooq.public_.tables.records.PrivilegeRecord;
import de.maaanu.jooq.public_.tables.records.RolePrivilegeRecord;
import de.maaanu.jooq.public_.tables.records.RoleRecord;
import de.maaanu.jooq.public_.tables.records.UserRecord;
import de.maaanu.jooq.public_.tables.records.UserRoleRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>PUBLIC</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<PrivilegeRecord, Integer> IDENTITY_PRIVILEGE = Identities0.IDENTITY_PRIVILEGE;
    public static final Identity<RoleRecord, Integer> IDENTITY_ROLE = Identities0.IDENTITY_ROLE;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = UniqueKeys0.PK_DATABASECHANGELOGLOCK;
    public static final UniqueKey<PrivilegeRecord> PK_PRIVILEGE = UniqueKeys0.PK_PRIVILEGE;
    public static final UniqueKey<PrivilegeRecord> CONSTRAINT_4 = UniqueKeys0.CONSTRAINT_4;
    public static final UniqueKey<PrivilegeRecord> CONSTRAINT_48 = UniqueKeys0.CONSTRAINT_48;
    public static final UniqueKey<RoleRecord> PK_ROLE = UniqueKeys0.PK_ROLE;
    public static final UniqueKey<RoleRecord> CONSTRAINT_26 = UniqueKeys0.CONSTRAINT_26;
    public static final UniqueKey<RoleRecord> CONSTRAINT_267 = UniqueKeys0.CONSTRAINT_267;
    public static final UniqueKey<UserRecord> PK_USER = UniqueKeys0.PK_USER;
    public static final UniqueKey<UserRecord> CONSTRAINT_2 = UniqueKeys0.CONSTRAINT_2;
    public static final UniqueKey<UserRecord> CONSTRAINT_27 = UniqueKeys0.CONSTRAINT_27;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<RolePrivilegeRecord, RoleRecord> FK_ROLE2PRIVILEGE = ForeignKeys0.FK_ROLE2PRIVILEGE;
    public static final ForeignKey<RolePrivilegeRecord, PrivilegeRecord> FK_PRIVILEGE2ROLE = ForeignKeys0.FK_PRIVILEGE2ROLE;
    public static final ForeignKey<UserRoleRecord, UserRecord> FK_USER2ROLE = ForeignKeys0.FK_USER2ROLE;
    public static final ForeignKey<UserRoleRecord, RoleRecord> FK_ROLE2USER = ForeignKeys0.FK_ROLE2USER;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<PrivilegeRecord, Integer> IDENTITY_PRIVILEGE = Internal.createIdentity(Privilege.PRIVILEGE, Privilege.PRIVILEGE.ID);
        public static Identity<RoleRecord, Integer> IDENTITY_ROLE = Internal.createIdentity(Role.ROLE, Role.ROLE.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, "PK_DATABASECHANGELOGLOCK", Databasechangeloglock.DATABASECHANGELOGLOCK.ID);
        public static final UniqueKey<PrivilegeRecord> PK_PRIVILEGE = Internal.createUniqueKey(Privilege.PRIVILEGE, "PK_PRIVILEGE", Privilege.PRIVILEGE.ID);
        public static final UniqueKey<PrivilegeRecord> CONSTRAINT_4 = Internal.createUniqueKey(Privilege.PRIVILEGE, "CONSTRAINT_4", Privilege.PRIVILEGE.ID);
        public static final UniqueKey<PrivilegeRecord> CONSTRAINT_48 = Internal.createUniqueKey(Privilege.PRIVILEGE, "CONSTRAINT_48", Privilege.PRIVILEGE.PRIVILEGE_TYPE);
        public static final UniqueKey<RoleRecord> PK_ROLE = Internal.createUniqueKey(Role.ROLE, "PK_ROLE", Role.ROLE.ID);
        public static final UniqueKey<RoleRecord> CONSTRAINT_26 = Internal.createUniqueKey(Role.ROLE, "CONSTRAINT_26", Role.ROLE.ID);
        public static final UniqueKey<RoleRecord> CONSTRAINT_267 = Internal.createUniqueKey(Role.ROLE, "CONSTRAINT_267", Role.ROLE.DESCRIPTION);
        public static final UniqueKey<UserRecord> PK_USER = Internal.createUniqueKey(User.USER, "PK_USER", User.USER.ID);
        public static final UniqueKey<UserRecord> CONSTRAINT_2 = Internal.createUniqueKey(User.USER, "CONSTRAINT_2", User.USER.ID);
        public static final UniqueKey<UserRecord> CONSTRAINT_27 = Internal.createUniqueKey(User.USER, "CONSTRAINT_27", User.USER.USERNAME);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<RolePrivilegeRecord, RoleRecord> FK_ROLE2PRIVILEGE = Internal.createForeignKey(de.maaanu.jooq.public_.Keys.CONSTRAINT_26, RolePrivilege.ROLE_PRIVILEGE, "FK_ROLE2PRIVILEGE", RolePrivilege.ROLE_PRIVILEGE.ROLE_ID, RolePrivilege.ROLE_PRIVILEGE.ROLE_ID);
        public static final ForeignKey<RolePrivilegeRecord, PrivilegeRecord> FK_PRIVILEGE2ROLE = Internal.createForeignKey(de.maaanu.jooq.public_.Keys.CONSTRAINT_4, RolePrivilege.ROLE_PRIVILEGE, "FK_PRIVILEGE2ROLE", RolePrivilege.ROLE_PRIVILEGE.PRIVILEGE_ID, RolePrivilege.ROLE_PRIVILEGE.PRIVILEGE_ID);
        public static final ForeignKey<UserRoleRecord, UserRecord> FK_USER2ROLE = Internal.createForeignKey(de.maaanu.jooq.public_.Keys.CONSTRAINT_2, UserRole.USER_ROLE, "FK_USER2ROLE", UserRole.USER_ROLE.USER_ID, UserRole.USER_ROLE.USER_ID);
        public static final ForeignKey<UserRoleRecord, RoleRecord> FK_ROLE2USER = Internal.createForeignKey(de.maaanu.jooq.public_.Keys.CONSTRAINT_26, UserRole.USER_ROLE, "FK_ROLE2USER", UserRole.USER_ROLE.ROLE_ID, UserRole.USER_ROLE.ROLE_ID);
    }
}
